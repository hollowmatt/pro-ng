{"ast":null,"code":"import { computed, signal } from \"@angular/core\";\nimport * as i0 from \"@angular/core\";\nclass Cart {\n  constructor() {\n    this.linesSignal = signal([]);\n    this.summary = computed(() => {\n      let newSummary = new CartSummary();\n      this.linesSignal().forEach(line => {\n        newSummary.itemCount += line.quantity;\n        newSummary.cartPrice += line.lineTotal;\n      });\n      return newSummary;\n    });\n  }\n  get lines() {\n    return this.linesSignal.asReadonly();\n  }\n  addLine(product, quantity = 1) {\n    this.linesSignal.mutate(linesArray => {\n      let line = linesArray.find(l => l.product.id == product.id);\n      if (line != undefined) {\n        line.quantity += quantity;\n      } else {\n        linesArray.push(new Cartline(proudct, quantity));\n      }\n    });\n  }\n  updateQuantity(product, quantity) {\n    this.linesSignal.mutate(linesArray => {\n      let line = linesArray.find(l => l.product.id == product.id);\n      if (line != undefined) {\n        line.quantity = Number(quantity);\n      }\n    });\n  }\n  removeLine(id) {\n    this.linesSignal.mutate(linesArray => {\n      let index = linesArray.findIndex(l => l.product.id == id);\n      linesArray.splice(index, 1);\n    });\n  }\n  clear() {\n    this.linesSignal.set([]);\n  }\n}\nCart.ɵfac = function Cart_Factory(t) {\n  return new (t || Cart)();\n};\nCart.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: Cart,\n  factory: Cart.ɵfac\n});\nexport { Cart };\nexport class Cartline {\n  constructor(product, quantity) {\n    this.product = product;\n    this.quantity = quantity;\n  }\n}\nexport class CartSummary {\n  constructor() {\n    this.itemCount = 0;\n    this.cartPrice = 0;\n  }\n}","map":{"version":3,"names":["computed","signal","Cart","constructor","linesSignal","summary","newSummary","CartSummary","forEach","line","itemCount","quantity","cartPrice","lineTotal","lines","asReadonly","addLine","product","mutate","linesArray","find","l","id","undefined","push","Cartline","proudct","updateQuantity","Number","removeLine","index","findIndex","splice","clear","set","factory","ɵfac"],"sources":["/Users/hollowmatt/Repo/manning/pro-ng/redo/SportsStore_16/src/app/model/cart.model.ts"],"sourcesContent":["import { Injectable, Signal, WritableSignal, computed, signal } from \"@angular/core\";\nimport { Product } from \"./product.model\";\n\n@Injectable()\nexport class Cart {\n  private linesSignal: WritableSignal<CartLine[]>;\n  public summary: Signal<CartSummary>;\n\n  constructor() {\n    this.linesSignal = signal([]);\n\n    this.summary = computed(() => {\n      let newSummary = new CartSummary();\n      this.linesSignal().forEach(line => {\n        newSummary.itemCount += line.quantity;\n        newSummary.cartPrice += line.lineTotal;\n      });\n      return newSummary;\n    })\n  }\n\n  get lines(): Signal<CartLine[]> {\n    return this.linesSignal.asReadonly();\n  }\n\n  addLine(product: Product, quantity: number = 1) {\n    this.linesSignal.mutate(linesArray => {\n      let line = linesArray.find(l => l.product.id == product.id);\n      if (line != undefined) {\n        line.quantity += quantity;\n      } else {\n        linesArray.push(new Cartline(proudct, quantity));\n      }\n    });\n  }\n\n  updateQuantity(product: Product, quantity: number) {\n    this.linesSignal.mutate(linesArray => {\n      let line = linesArray.find(l => l.product.id == product.id);\n      if (line != undefined) {\n        line.quantity = Number(quantity);\n      }\n    });\n  }\n\n  removeLine(id: number) {\n    this.linesSignal.mutate(linesArray => {\n      let index = linesArray.findIndex(l => l.product.id == id);\n      linesArray.splice(index, 1);\n    });\n  }\n\n  clear() {\n    this.linesSignal.set([]);\n  }\n\n}\n\nexport class Cartline {\n  constructor(public product: Product, public quantity: number) {}\n}\n\nexport class CartSummary {\n  itemCount: number = 0;\n  cartPrice: number = 0;\n}"],"mappings":"AAAA,SAA6CA,QAAQ,EAAEC,MAAM,QAAQ,eAAe;;AAGpF,MACaC,IAAI;EAIfC,YAAA;IACE,IAAI,CAACC,WAAW,GAAGH,MAAM,CAAC,EAAE,CAAC;IAE7B,IAAI,CAACI,OAAO,GAAGL,QAAQ,CAAC,MAAK;MAC3B,IAAIM,UAAU,GAAG,IAAIC,WAAW,EAAE;MAClC,IAAI,CAACH,WAAW,EAAE,CAACI,OAAO,CAACC,IAAI,IAAG;QAChCH,UAAU,CAACI,SAAS,IAAID,IAAI,CAACE,QAAQ;QACrCL,UAAU,CAACM,SAAS,IAAIH,IAAI,CAACI,SAAS;MACxC,CAAC,CAAC;MACF,OAAOP,UAAU;IACnB,CAAC,CAAC;EACJ;EAEA,IAAIQ,KAAKA,CAAA;IACP,OAAO,IAAI,CAACV,WAAW,CAACW,UAAU,EAAE;EACtC;EAEAC,OAAOA,CAACC,OAAgB,EAAEN,QAAA,GAAmB,CAAC;IAC5C,IAAI,CAACP,WAAW,CAACc,MAAM,CAACC,UAAU,IAAG;MACnC,IAAIV,IAAI,GAAGU,UAAU,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACJ,OAAO,CAACK,EAAE,IAAIL,OAAO,CAACK,EAAE,CAAC;MAC3D,IAAIb,IAAI,IAAIc,SAAS,EAAE;QACrBd,IAAI,CAACE,QAAQ,IAAIA,QAAQ;OAC1B,MAAM;QACLQ,UAAU,CAACK,IAAI,CAAC,IAAIC,QAAQ,CAACC,OAAO,EAAEf,QAAQ,CAAC,CAAC;;IAEpD,CAAC,CAAC;EACJ;EAEAgB,cAAcA,CAACV,OAAgB,EAAEN,QAAgB;IAC/C,IAAI,CAACP,WAAW,CAACc,MAAM,CAACC,UAAU,IAAG;MACnC,IAAIV,IAAI,GAAGU,UAAU,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACJ,OAAO,CAACK,EAAE,IAAIL,OAAO,CAACK,EAAE,CAAC;MAC3D,IAAIb,IAAI,IAAIc,SAAS,EAAE;QACrBd,IAAI,CAACE,QAAQ,GAAGiB,MAAM,CAACjB,QAAQ,CAAC;;IAEpC,CAAC,CAAC;EACJ;EAEAkB,UAAUA,CAACP,EAAU;IACnB,IAAI,CAAClB,WAAW,CAACc,MAAM,CAACC,UAAU,IAAG;MACnC,IAAIW,KAAK,GAAGX,UAAU,CAACY,SAAS,CAACV,CAAC,IAAIA,CAAC,CAACJ,OAAO,CAACK,EAAE,IAAIA,EAAE,CAAC;MACzDH,UAAU,CAACa,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;IAC7B,CAAC,CAAC;EACJ;EAEAG,KAAKA,CAAA;IACH,IAAI,CAAC7B,WAAW,CAAC8B,GAAG,CAAC,EAAE,CAAC;EAC1B;;AAlDWhC,IAAI,C;mBAAJA,IAAI;AAAA;AAAJA,IAAI,C;SAAJA,IAAI;EAAAiC,OAAA,EAAJjC,IAAI,CAAAkC;AAAA;SAAJlC,IAAI;AAsDjB,OAAM,MAAOuB,QAAQ;EACnBtB,YAAmBc,OAAgB,EAASN,QAAgB;IAAzC,KAAAM,OAAO,GAAPA,OAAO;IAAkB,KAAAN,QAAQ,GAARA,QAAQ;EAAW;;AAGjE,OAAM,MAAOJ,WAAW;EAAxBJ,YAAA;IACE,KAAAO,SAAS,GAAW,CAAC;IACrB,KAAAE,SAAS,GAAW,CAAC;EACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}